{"mappings":"YA6LAA,QAAQC,IACJ,0CAC+B,kCASnC,IAAMC,EAnBS,CACX,cACA,UACA,kBACA,aACA,cAcoBC,KAwBxB,SAAaC,GACT,OAAO,IAAIC,SACP,SAACC,EAASC,GAEL,IAiBUC,EAAKC,EAjBTC,GAiBIF,EAjBiB,IAiBZC,EAjBkB,KAkBnCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAhB5CM,YAAW,WACPR,EAAQ,CAACF,QAAOM,Q,GACbA,E,OA/BnBV,QAAQC,IAAIC,GAGZG,QAAQU,KAAKb,GAAUc,MAAK,SAAAC,G,IAAEb,EAAKa,EAALb,MAAOM,EAAIO,EAAJP,KACjCV,QAAQC,IACR,cAA4CiB,OAAvBd,EAAM,mBAAiCc,OAALR,EAAK,SACtC,iC,IAM1BL,QAAQc,IAAIjB,GAAUc,MAAK,WAEvBhB,QAAQC,IAEJ,0CACA,gC","sources":["src/js/promices.js"],"sourcesContent":["\n// let data = 'тут ще нічого нема';\n\n// const promise = new Promise((resolve, reject) => {\n//     // resole(5);\n    \n//     const canFullfile = Math.random() > 0.5;\n\n//     setTimeout(() => {if(canFullfile) {\n//         resolve('Проміс виконався успішно - виконаний - fullfiled');\n//     }\n//     reject('Проміс виконався не успішно - відхилений - rejected');}, 2000);\n// });\n// console.log(promise);\n\n// promise.then(result => {console.log(result);\n// }, error => {console.log(error);\n// }\n// )\n\n\n// then(onSuccesss, onError)\n// console.log(data);\n\n// promise.then(onFullfiled, onRejected);\n\n// // console.log(data);\n\n// function onFullfiled(result) {\n//     console.log(result);    \n// };\n\n// function onRejected(error) {\n//     console.log(error);    \n// };\n\n\n// promise.then(result => {\n//     console.log(result);\n\n//     return 5;\n    \n// }).then(x => {console.log(x);\n//     return 10;\n// }).then(y => {console.log(y);\n// });\n// ------------------------------\n// promise\n// .then(onFullfiled, onRejected)\n// .then(\n//     x => {console.log(x);\n\n//         throw new Error ('помилка в другому then');\n\n//      return 10;}, \n\n//      error => console.log(error),\n//     )\n// .then(\n//     y => console.log(y), \n\n//     error => console.log(error),\n//        );\n// ----------------------\n// promise\n// .then(onFullfiled)\n// .then(\n//     x => {console.log(x);\n\n//         // throw new Error ('помилка в другому then');\n//            return 10;}\n//     )\n// .then(\n//     y => {console.log(y)}\n//        )\n// .catch(error => {console.log(error);\n//        }).finally(() => console.log('Я буду виконаний в любому випадку'),);\n\n// ---------------------------------------\n\n// const makeOrder = dish => {\n// const DELAY = 1000;\n\n// const promise = new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n//     setTimeout(() => \n//         {\n//             if (passed) {\n//                 resolve('ось Ваша страва');\n//             } \n//                 reject('вибачте продукти скінчилися');\n//     }, DELAY);\n\n// });\n// return promise;\n\n\n// };\n\n// const makeOrder = dish => {\n\n// return Promise.resolve(`ось Ваша страва ${dish}`);    \n    \n// // const promise = new Promise((resolve, reject) => {\n// //     const passed = Math.random() > 0.5;\n        \n// //     if (passed) {\n// //         onSuccess(`ось Ваша страва ${dish}`);\n// //     }  \n \n// // });    \n//     };\n    \n\n// makeOrder('булочка').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n\n\n// function onMakeOrderSuccess(result) {\n//     console.log('onMakeOrderSuccess');\n//     console.log(result);\n    \n    \n// }\n\n// function onMakeOrderError(error) {\n//     console.log('onMakeOrderError');\n//     console.log(error);\n    \n    \n// }\n\n\n// -----------pocemon\n\n\n// function fetch(url) {\n//     return new Promise(...)\n// }\n\n// const fetchPokemonId = id => {\n//     return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json())};\n\n// fetchPokemonId(1).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(2).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(3).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(390055).then(onFetchSuccess).catch(onFetchError);\n\n\n// function onFetchSuccess(pokemon) {\n//     console.log('onFetchSuccess -> onFetchSuccess');\n//     console.log(pokemon);\n  \n// } \n\n// function onFetchError(error) {\n//     console.log('onFetchError -> onFetchError');\n//     console.log(error);\n// }\n\n// ----------------------\n\n// const makePromise = () => {\n//     return new Promise((resolve, reject) => {\n\n//         const passed = Math.random() > 0.5;\n//         if (passed) {\n//             resolve('привіт це resolve');\n//         }\n//          reject('привіт це reject');\n        \n                \n//     })\n// }\n\n// makePromise().then(result => console.log(result)).catch(error => console.log(error));\n\n\n// ------------------------іподром\nimport '../css/common.css';\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Seabiscult',\n];\n\nconsole.log(\n    '%c Заїзд почався, ставки не приймаються',\n    'color: broun; font-size: 14px;',\n\n);\n\n\n\n\n\n\nconst promises = horses.map(run);\nconsole.log(promises);\n\n\nPromise.race(promises).then(({horse, time}) => {\n    console.log(\n    `%c Переміг ${horse}, фінішував за ${time} часу`,\n    'color: green; font-size: 14px;',\n\n);\n});\n\n\nPromise.all(promises).then(() => {\n\n    console.log(\n\n        '%c Заїзд закінчився, ставки приймаються',\n        'color: blue; font-size: 14px;',\n    \n    );\n});\n\n\nfunction run(horse) {\n    return new Promise (\n        (resolve, reject) =>\n        {           \n             const time = getRandomTime(2000, 35000);\n\n            setTimeout(() => {\n                resolve({horse, time});\n                }, time);\n\n\n        }\n    )\n    \n}\n\n\n\n// run('horse').then(x => console.log(x));\n\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n    \n};"],"names":["console","log","$a669b0b41eeac6cb$var$promises","map","horse","Promise","resolve","reject","min","max","time","Math","floor","random","setTimeout","race","then","param","concat","all"],"version":3,"file":"index.c9b39b9e.js.map"}