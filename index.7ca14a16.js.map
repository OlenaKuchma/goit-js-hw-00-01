{"mappings":"AAsLA,MAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAGEC,EAAO,CACTC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAGtCH,EAAKC,SAASM,iBAAiB,SAG/B,WACIC,GAAc,EACd,MAAMC,EAAWV,EAAOW,IAAIC,GAE5BC,EAAkB,IAElBC,EAAoB,wCAQCC,EANLL,EAOZM,QAAQC,KAAKF,GAASG,MAAK,EAACC,MAACA,EAAKC,KAAEA,MAChCP,EAAkB,WAACM,mBAAuBC,UA8CtD,UAA4BD,MAACA,EAAKC,KAAEA,EAAMC,YAAAC,IACtC,MAAMC,EAAK,WAAWD,aAAuBH,aAAiBC,aAC9DnB,EAAKM,UAAUiB,mBAAmB,YAAaD,E,CA/CjBE,CAAH,C,MAACN,E,KAAOC,E,YAAMX,GAAa,IAI1D,SAAoBM,GAChBC,QAAQU,IAAIX,GAASG,MAAK,KACtBJ,EAAoB,uCAAuC,G,CAb/Da,CAAWjB,GAIf,IAAyBK,C,IAfzB,IAAIN,EAAc,EA6BlB,SAASG,EAAIO,GACT,OAAO,IAAIH,SACP,CAACY,EAASC,KAEL,MAAMT,GAiBIU,EAjBiB,IAiBZC,EAjBkB,KAkBnCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADxD,IAAuBA,EAAKC,EAfhBI,YAAW,KACPP,EAAQ,C,MAACT,E,KAAOC,GAAM,GACnBA,EAAK,G,CAkBxB,SAASP,EAAkBuB,GACvBnC,EAAKI,YAAYgC,YAAcD,C,CAGnC,SAAStB,EAAoBsB,GACzBnC,EAAKK,cAAc+B,YAAcD,C","sources":["src/js/promices.js"],"sourcesContent":["\n// let data = 'тут ще нічого нема';\n\n// const promise = new Promise((resolve, reject) => {\n//     // resole(5);\n    \n//     const canFullfile = Math.random() > 0.5;\n\n//     setTimeout(() => {if(canFullfile) {\n//         resolve('Проміс виконався успішно - виконаний - fullfiled');\n//     }\n//     reject('Проміс виконався не успішно - відхилений - rejected');}, 2000);\n// });\n// console.log(promise);\n\n// promise.then(result => {console.log(result);\n// }, error => {console.log(error);\n// }\n// )\n\n\n// then(onSuccesss, onError)\n// console.log(data);\n\n// promise.then(onFullfiled, onRejected);\n\n// // console.log(data);\n\n// function onFullfiled(result) {\n//     console.log(result);    \n// };\n\n// function onRejected(error) {\n//     console.log(error);    \n// };\n\n\n// promise.then(result => {\n//     console.log(result);\n\n//     return 5;\n    \n// }).then(x => {console.log(x);\n//     return 10;\n// }).then(y => {console.log(y);\n// });\n// ------------------------------\n// promise\n// .then(onFullfiled, onRejected)\n// .then(\n//     x => {console.log(x);\n\n//         throw new Error ('помилка в другому then');\n\n//      return 10;}, \n\n//      error => console.log(error),\n//     )\n// .then(\n//     y => console.log(y), \n\n//     error => console.log(error),\n//        );\n// ----------------------\n// promise\n// .then(onFullfiled)\n// .then(\n//     x => {console.log(x);\n\n//         // throw new Error ('помилка в другому then');\n//            return 10;}\n//     )\n// .then(\n//     y => {console.log(y)}\n//        )\n// .catch(error => {console.log(error);\n//        }).finally(() => console.log('Я буду виконаний в любому випадку'),);\n\n// ---------------------------------------\n\n// const makeOrder = dish => {\n// const DELAY = 1000;\n\n// const promise = new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n//     setTimeout(() => \n//         {\n//             if (passed) {\n//                 resolve('ось Ваша страва');\n//             } \n//                 reject('вибачте продукти скінчилися');\n//     }, DELAY);\n\n// });\n// return promise;\n\n\n// };\n\n// const makeOrder = dish => {\n\n// return Promise.resolve(`ось Ваша страва ${dish}`);    \n    \n// // const promise = new Promise((resolve, reject) => {\n// //     const passed = Math.random() > 0.5;\n        \n// //     if (passed) {\n// //         onSuccess(`ось Ваша страва ${dish}`);\n// //     }  \n \n// // });    \n//     };\n    \n\n// makeOrder('булочка').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n\n\n// function onMakeOrderSuccess(result) {\n//     console.log('onMakeOrderSuccess');\n//     console.log(result);\n    \n    \n// }\n\n// function onMakeOrderError(error) {\n//     console.log('onMakeOrderError');\n//     console.log(error);\n    \n    \n// }\n\n\n// -----------pocemon\n\n\n// function fetch(url) {\n//     return new Promise(...)\n// }\n\n// const fetchPokemonId = id => {\n//     return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json())};\n\n// fetchPokemonId(1).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(2).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(3).then(onFetchSuccess).catch(onFetchError);\n// fetchPokemonId(390055).then(onFetchSuccess).catch(onFetchError);\n\n\n// function onFetchSuccess(pokemon) {\n//     console.log('onFetchSuccess -> onFetchSuccess');\n//     console.log(pokemon);\n  \n// } \n\n// function onFetchError(error) {\n//     console.log('onFetchError -> onFetchError');\n//     console.log(error);\n// }\n\n// ----------------------\n\n// const makePromise = () => {\n//     return new Promise((resolve, reject) => {\n\n//         const passed = Math.random() > 0.5;\n//         if (passed) {\n//             resolve('привіт це resolve');\n//         }\n//          reject('привіт це reject');\n        \n                \n//     })\n// }\n\n// makePromise().then(result => console.log(result)).catch(error => console.log(error));\n\n\n// ------------------------іподром\nimport '../css/feedback-form.css';\n\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Seabiscult',\n];\n\nconst refs = {\n    startBtn: document.querySelector('.js-start-race'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nlet raceCounter = 0;\nfunction onStart() {\n    raceCounter +=1;\n    const promises = horses.map(run);\n\n    updateWinnerfield('');\n\n    updateProgressField('Заїзд почався, ставки не приймаються');\n\n    determineWinner(promises);\n\n    waitForAll(promises);\n};\n\n\nfunction determineWinner(horsesP) {\n        Promise.race(horsesP).then(({horse, time}) => {\n            updateWinnerfield(`Переміг ${horse}, фінішував за ${time} часу`);\n            updateResultsTable({horse, time, raceCounter}); \n            });\n       };\n\nfunction waitForAll(horsesP) {\n    Promise.all(horsesP).then(() => {\n        updateProgressField('Заїзд закінчився, ставки приймаються');\n        });\n}\n\n\nfunction run(horse) {\n    return new Promise (\n        (resolve, reject) =>\n        {           \n             const time = getRandomTime(2000, 3500);\n\n            setTimeout(() => {\n                resolve({horse, time});\n                }, time);\n\n\n        }\n    )\n    \n};\n\n\n\n// run('horse').then(x => console.log(x));\n\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n    \n};\n\nfunction updateWinnerfield(massege) {\n    refs.winnerField.textContent = massege;\n};\n\nfunction updateProgressField(massege) {\n    refs.progressField.textContent = massege;\n};\n\nfunction updateResultsTable({horse, time, raceCounter}) {\n    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td><tr>`;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr);\n    \n}"],"names":["$e987a3b0fb7ef19f$var$horses","$e987a3b0fb7ef19f$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","addEventListener","$e987a3b0fb7ef19f$var$raceCounter","promises","map","$e987a3b0fb7ef19f$var$run","$e987a3b0fb7ef19f$var$updateWinnerfield","$e987a3b0fb7ef19f$var$updateProgressField","horsesP","Promise","race","then","horse","time","raceCounter","raceCounter1","tr","insertAdjacentHTML","$e987a3b0fb7ef19f$var$updateResultsTable","all","$e987a3b0fb7ef19f$var$waitForAll","resolve","reject","min","max","Math","floor","random","setTimeout","massege","textContent"],"version":3,"file":"index.7ca14a16.js.map"}