{"mappings":"AAsJA,MAAMA,EAAO,CACXC,UAAWC,SAASC,cAAc,iBAClCC,SAAUF,SAASC,cAAc,6BACjCE,QAASH,SAASC,cAAc,6BAiElC,MAAMG,EAAQ,IAzDd,MAUCC,OAAO,CAKPC,QACC,GAAIC,KAAKC,SACP,OAEF,MAAMC,EAAYC,KAAKC,MACvBJ,KAAKC,UAAS,EAEdD,KAAKK,WAAaC,aAAY,KAE5B,MACMC,EADcJ,KAAKC,MACOF,EAC1BM,EAAOR,KAAKS,kBAAkBF,GACtCP,KAAKU,OAAOF,EAAK,GAEZ,I,CAIPG,OACEC,cAAcZ,KAAKK,YACnBL,KAAKC,UAAW,EAChB,MAAMO,EAAOR,KAAKS,kBAAkB,GACpCT,KAAKU,OAAOF,E,CAIdK,IAAIC,GACA,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAIlCP,kBAAkBD,GAKjB,MAAO,C,MAJOR,KAAKa,IAAII,KAAKC,MAAMV,EAAS,MAAiB,O,KAC/CR,KAAKa,IAAII,KAAKC,MAAMV,EAAS,KAAc,M,KAC3CR,KAAKa,IAAII,KAAKC,MAAMV,EAAS,IAAU,M,CAhDvDW,aAAYT,OAACA,IACZV,KAAKK,WAAa,KAClBL,KAAKC,UAAW,EAChBD,KAAKU,OAASA,EACdV,KAAKF,M,GAoDiB,CACtBY,OAoCF,UAAyBU,MAACA,EAAKC,KAAEA,EAAIC,KAAEA,IACrC/B,EAAKC,UAAU+B,YAAc,GAAGH,KAASC,KAAQC,G,IAInD/B,EAAKI,SAAS6B,iBAAiB,SAAS,KACtC3B,EAAME,OAAO,IAGfR,EAAKK,QAAQ4B,iBAAiB,SAAS,KACrC3B,EAAMc,MAAM","sources":["src/js/js1.js"],"sourcesContent":["import css from '../css/common.css';\nimport css2 from '../css/feedback-form.css';\n\n// const logMessage = () => {\n//   console.log('Лог при виклику колл-бек функції через 3 секунди');\n// };\n\n// console.log('До виклику setTimeOut');\n\n// setTimeout(() => {\n//   console.log('В середині виклику колл-бек функції для setTimeOut');\n// }, 2000);\n\n// console.log('Після виклику setTimeOut');\n\n// for (let index = 0; index < 1000; index++) {\n//   console.log(index);\n// }\n\n//----------------------------setTimeout  clearTimeout\n// const logger = time => {\n//   console.log(`Лог через ${time} тому, що не відмінили таймаут`);\n// };\n\n// const timerId = setTimeout(logger, 2000, 2000);\n// console.log(timerId);\n\n// const shouldCanceltimer = Math.random() > 0.3;\n\n// console.log(shouldCanceltimer);\n\n// if (shouldCanceltimer) {\n//   clearTimeout(timerId);\n// }\n\n// ------------------- setInterval clearInterval\n\n// const logger = time => {\n//   console.log(\n//     `Лог кожні ${time}с - ${Date.now()} тому, що не відмінили таймаут`\n//   );\n// };\n\n// console.log('До виклику setInterval');\n// const timerId = setInterval(logger, 2000, 2000);\n\n// console.log('Після виклику setInterval');\n\n// console.log(timerId);\n\n// const shouldCanceltimer = Math.random() > 0.3;\n\n// console.log(shouldCanceltimer);\n\n// if (shouldCanceltimer) {\n//   clearInterval(timerId);\n// }\n\n// ---------------------INTERVAL\n\n// const NOTIFICATION_DELAY = 3000;\n\n// let timeoutId;\n\n// const refs = {\n//   notification: document.querySelector('.js-alert'),\n// };\n// refs.notification.addEventListener('click', onNotificationClick);\n\n// showNotification();\n\n// function onNotificationClick() {\n//   hideNotification();\n//   clearTimeout(timeoutId);\n// }\n\n// function showNotification() {\n//   refs.notification.classList.add('js-visible');\n\n//   timeoutId = setTimeout(() => {\n//     hideNotification();\n//   }, NOTIFICATION_DELAY);\n// }\n\n// function hideNotification() {\n//   refs.notification.classList.remove('js-visible');\n// }\n\n// -------------------TIMEOUT\n\n// const PROMPT_DELAY = 1000;\n// const MAX_PROPT_ATTEMPTS = 3;\n// let promptCounter = 0;\n// // let hasSubscribed = false;\n\n// const refs = {\n//   notification: document.querySelector('.js-alert'),\n// };\n\n// refs.notification.addEventListener('click', hideNotification);\n\n// Bootstrap...\n\n// showNotification();\n// ЦЕ НЕ ПРАЦЮЄ - ТРЕБА ДИВИТИСЬ ЯК НА ВІДЕО\n\n// const intervalId = setInterval(() => {\n//   if (promptCounter === MAX_PROPT_ATTEMPTS) {\n//     console.log('Зупиняємо інтервал');\n\n//     clearInterval(intervalId);\n\n//     return;\n//   }\n\n//   console.log('Підпишись на розсилку');\n//   promptCounter += 1;\n// }, PROMPT_DELAY);\n\n// function showNotification() {\n//   refs.notification.classList.add('js-visible');\n// }\n\n// function hideNotification() {\n//   refs.notification.classList.remove('js-visible');\n// }\n\n\n// -------------- Data now\n\n// const date1 = new Date();\n// console.log('date1', date1);\n\n// setTimeout(() => {\n//   const date2 = new Date();\n//   console.log('date2', date2);\n// }, 3000);\n\n// // краще ->\n\n// const date3 = Date.now();\n// console.log('date3', date3);\n\n// setTimeout(() => {\n//   const date4 = Date.now();\n//   console.log('date4', date4);\n// }, 3000);\n\n// ----------timer\n\nconst refs = {\n  clockface: document.querySelector('.js-clockface'),\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n}\n\n\n\n\n// refs.clockface.addEventListener('')\n\nclass Timer {\n constructor({onTick}){\n  this.intervalId = null;\n  this.isActive = false;\n  this.onTick = onTick;\n  this.init();\n\n\n }\n\n init() {\n  \n  \n }\n\n start() {\n  if (this.isActive) {\n    return;\n  }\n  const startTime = Date.now();\n  this.isActive=true;\n\n  this.intervalId = setInterval(() => {\n    \n    const currentTime = Date.now();\n    const deltaTime = currentTime - startTime;\n    const time = this.getTimeComponents(deltaTime);\n  this.onTick(time);\n    \n    }, 1000);\n    \n}\n\nstop() {\n  clearInterval(this.intervalId);\n  this.isActive = false;\n  const time = this.getTimeComponents(0);\n  this.onTick(time);\n  \n}\n\npad(value) { \n    return String(value).padStart(2, '0');\n    \n  }\n  \n   getTimeComponents(time) {\n    const hours = this.pad(Math.floor((time % (1000*60*60*24))/(1000*60*60)));\n    const mins = this.pad(Math.floor((time % (1000*60*60))/(1000*60)));\n    const secs = this.pad(Math.floor((time % (1000*60))/1000));\n  \n    return {hours, mins, secs};\n    \n  }\n\n}\n\nconst timer = new Timer({\n  onTick: updateClockFace,\n}); \n\n\n// const timer = {\n//   intervalId: null,\n//   isActive: false,\n\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive=true;\n\n//     this.intervalId = setInterval(() => {\n      \n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       const time = getTimeComponents(deltaTime);\n      \n//       updateClockFace(time);\n//       // console.log(`${hours}:${mins}:${secs}`);\n//       // console.log(currentTime - startTime);\n      \n//     }, 1000);\n//   },\n\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n//   }\n// };\n\n\n\nfunction updateClockFace({hours, mins, secs}) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n  \n}\n\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n\n});\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n\n})\n\n// function pad(value) { \n//   return String(value).padStart(2, '0');\n  \n// }\n\n// function getTimeComponents(time) {\n//   const hours = pad(Math.floor((time % (1000*60*60*24))/(1000*60*60)));\n//   const mins = pad(Math.floor((time % (1000*60*60))/(1000*60)));\n//   const secs = pad(Math.floor((time % (1000*60))/1000));\n\n//   return {hours, mins, secs};\n  \n// }"],"names":["$8886754a3afb0810$var$refs","clockface","document","querySelector","startBtn","stopBtn","$8886754a3afb0810$var$timer","init","start","this","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","time","getTimeComponents","onTick","stop","clearInterval","pad","value","String","padStart","Math","floor","constructor","hours","mins","secs","textContent","addEventListener"],"version":3,"file":"index.0f56b417.js.map"}